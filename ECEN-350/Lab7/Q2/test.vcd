$date
Sun Oct 25 22:50:22 2020
$end
$version
Riviera-PRO Version 2020.04.130.7729
$end
$timescale
1 ps
$end

$scope module ALUTest_v $end
$var wire 64 ! BusW [63:0] $end
$var wire 1 " Zero $end
$var reg 64 # BusA [63:0] $end
$var reg 64 $ BusB [63:0] $end
$var reg 4 % ALUCtrl [3:0] $end
$var reg 8 & passed [7:0] $end

$scope module uut $end
$var wire 64 ' BusA [63:0] $end
$var wire 64 ( BusB [63:0] $end
$var wire 4 ) ALUCtrl [3:0] $end
$var reg 64 * BusW [63:0] $end
$var reg 1 + Zero $end
$upscope $end


$scope task passTest $end
$var reg 65 , actualOut [64:0] $end
$var reg 65 - expectedOut [64:0] $end
$var reg 257 . testType [256:0] $end
$var reg 8 / passed [7:0] $end
$upscope $end


$scope task allPassed $end
$var reg 8 0 passed [7:0] $end
$var reg 8 1 numTests [7:0] $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
bx !
x"
b1 #
b1000 $
b0 %
b0 &
b1 '
b1000 (
b0 )
bx *
x+
bx ,
bx -
bx .
bx /
bx 0
bx 1
$end
#20000
b0 *
b0 !
1+
1"
#40000
b10000000000000000000000000000000000000000000000000000000000000000 ,
b10000000000000000000000000000000000000000000000000000000000000000 -
b100000101001110010001000010000000110000011110000011000100101100001100000111100000111000 .
b1 /
b1 &
b11 $
b10 #
b10 '
b11 (
#60000
b10 *
b10 !
0+
0"
#80000
b10 ,
b10 -
b100000101001110010001000010000000110000011110000011001000101100001100000111100000110011 .
b10 /
b10 &
b1 $
b101 #
b101 '
b1 (
#100000
b1 *
b1 !
#120000
b1 ,
b1 -
b100000101001110010001000010000000110000011110000011010100101100001100000111100000110001 .
b11 /
b11 &
b1 %
b110 $
b100 #
b100 '
b110 (
b1 )
#140000
b110 *
b110 !
#160000
b110 ,
b110 -
b1001111010100100010000000110000011110000011010000101100001100000111100000110110 .
b100 /
b100 &
b11 $
b111 #
b111 '
b11 (
#180000
b111 *
b111 !
#200000
b111 ,
b111 -
b1001111010100100010000000110000011110000011011100101100001100000111100000110011 .
b101 /
b101 &
b1000 $
b11 #
b11 '
b1000 (
#220000
b1011 *
b1011 !
#240000
b1011 ,
b1011 -
b1001111010100100010000000110000011110000011001100101100001100000111100000111000 .
b110 /
b110 &
b10 %
b1001 $
b1 #
b1 '
b1001 (
b10 )
#260000
b1010 *
b1010 !
#280000
b1010 ,
b1010 -
b100000101000100010001000010000000110000011110000011000100101100001100000111100000111001 .
b111 /
b111 &
b0 $
b0 #
b0 '
b0 (
#300000
b0 *
b0 !
1+
1"
#320000
b10000000000000000000000000000000000000000000000000000000000000000 ,
b10000000000000000000000000000000000000000000000000000000000000000 -
b100000101000100010001000010000000110000011110000011000000101100001100000111100000110000 .
b1000 /
b1000 &
b1 $
b111 #
b111 '
b1 (
#340000
b1000 *
b1000 !
0+
0"
#360000
b1000 ,
b1000 -
b100000101000100010001000010000000110000011110000011011100101100001100000111100000110001 .
b1001 /
b1001 &
b110 %
b11 $
b1010 #
b1010 '
b11 (
b110 )
#380000
b111 *
b111 !
#400000
b111 ,
b111 -
b101001101010101010000100010000000110000011110000100000100101100001100000111100000110011 .
b1010 /
b1010 &
b10 $
b1011 #
b1011 '
b10 (
#420000
b1001 *
b1001 !
#440000
b1001 ,
b1001 -
b101001101010101010000100010000000110000011110000100001000101100001100000111100000110010 .
b1011 /
b1011 &
b0 $
b100 #
b100 '
b0 (
#460000
b100 *
b100 !
#480000
b100 ,
b100 -
b101001101010101010000100010000000110000011110000011010000101100001100000111100000110000 .
b1100 /
b1100 &
b111 %
b110 $
b1 #
b1 '
b110 (
b111 )
#500000
b110 *
b110 !
#520000
b110 ,
b110 -
b1010000010000010101001101010011010000100010000000110000011110000011000100101100001100000111100000110110 .
b1101 /
b1101 &
b10 #
b10 '
#560000
b1110 /
b1110 &
b11 #
b11 '
#600000
b1111 /
b1111 &
b1111 0
b1111 1
